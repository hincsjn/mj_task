import redis
import asyncio
import json
from handlers import img_mj_handlers

# r = redis.Redis(
#     host='0.0.0.0',
#     port=6379,
#     password="123",
#     decode_responses=True
# )
r = redis.Redis(
    host='127.0.0.1',
    port=6379,
    # password="123",
    decode_responses=True
)
listener = r.pubsub()
listener.subscribe('mj-response')


def proccess_message(message):
    prompt, msg, status = '', '', ''
    if message['t'] == 'MESSAGE_CREATE':
        print('19', message['d']['content'])
        # –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
        if '(Waiting to start)' in message['d']['content']:
            prompt = message['d']['content'].split('**')[1]
            msg = '‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!'
            status = 'request sent'
        
        # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
        elif '(relaxed)' in message['d']['content'] or '(fast)' in message['d']['content']:
            prompt = message['d']['content'].split('**')[1]
            img_link = message['d']['attachments'][0]['url']
            ds_msg_id = message['d']['id']
            msg = f'{img_link} | {ds_msg_id}'
            status = 'response got'
        
        elif 'Image #' in message['d']['content']:
            prompt = message['d']['content'].split('**')[1]
            img_link = message['d']['attachments'][0]['url']
            ds_msg_id = message['d']['id']
            msg = f'{img_link} | {ds_msg_id}'
            status = 'response got upscaled'


        # –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # elif 'Image #' in message['d']['content']:


        else:
            # –±–ª–æ–∫ –æ—à–∏–±–æ–∫
            try:
                error_title = message['d']['embeds'][0]['title']
                prompt = message['d']['embeds'][0]['footer']['text'].replace('/imagine ', '')

                # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                if error_title == 'Banned prompt':
                    error_description = message['d']['embeds'][0]['description']
                    banned_word = error_description.split('`')[1]
                    with open('static/stop_word_list.txt', 'a') as f:
                        f.write('\n', banned_word)

                    msg = f'–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Midjourney.\n–£–¥–∞–ª–∏—Ç–µ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å–ª–æ–≤–æ: {banned_word}'
                    
                
                # –∑–∞–ø—Ä–æ—Å –ø–æ–ø–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å
                elif error_title == 'Job queued':
                    error_description = message['d']['embeds'][0]['description']
                    msg = '–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏'

                # —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ
                elif error_title == 'Queue full':
                    error_description = message['d']['embeds'][0]['description']

                # –æ—à–∏–±–∫–∞
                else:
                    error_description = message['d']['embeds'][0]['description']
                    msg = '–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Midjourney.\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @neural_help. –ò –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç.'
                    if ':::::' in error_description:
                        exit()
                if msg == '':
                    msg = f'{error_title}\n{error_description}'
                status = 'error'
            
            except:
                ...


    # –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    elif message['t'] == 'MESSAGE_UPDATE':    
        print('58', message['d']['content'])

        if '%' in message['d']['content']:
            percentage = message['d']['content'].split('%)')[0].split('(')[-1]
            msg = f"{int(percentage) // 10 * 'üü¢' + (10 - int(percentage) // 10) * '‚ö™Ô∏è'} {percentage}%"
            prompt = message['d']['content'].split('**')[1]
            status = 'loading'
    
    else:
        return '', '', ''
    

    return prompt, msg, status


async def listen1():
    for message in listener.listen():
        try:
            if message['data'] != '':
                message = json.loads(message['data'])
                # print('77 - message', message)
                try: 
                    if message['t'] in ['MESSAGE_CREATE', 'MESSAGE_UPDATE']:
                        print('80 - message', message)
                except:
                    ...
                prompt, msg, status = proccess_message(message)
                
                if prompt and msg:
                    print('84 - prompt, msg', prompt, msg)
                    if ':::::' in prompt:
                        quit()
                    print()
                    await img_mj_handlers.send_mj_status(prompt, msg, status)
        except TypeError:
            ...
        except KeyError:
            ...
        
    
if __name__ == '__main__':
    asyncio.run(listen1())